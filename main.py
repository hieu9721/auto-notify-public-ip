#!/usr/bin/env python3
"""
IP Monitor Bot - Theo d√µi thay ƒë·ªïi IP public
H·ªó tr·ª£ th√¥ng b√°o qua email, Telegram, v√† Discord
"""

import requests
import time
import json
import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import os
from dotenv import load_dotenv

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ip_monitor.log'),
        logging.StreamHandler()
    ]
)

class IPMonitor:
    def __init__(self, config_file='config.json'):
        # Load environment variables
        load_dotenv()
        
        self.config_file = config_file
        self.config = self.load_config()
        self.current_ip = None
        self.ip_file = 'current_ip.txt'
        
    def load_config(self):
        """T·∫£i c·∫•u h√¨nh t·ª´ file JSON v√† environment variables"""
        default_config = {
            "check_interval": int(os.getenv("CHECK_INTERVAL", 300)),
            "notification_methods": os.getenv("NOTIFICATION_METHODS", "email").split(","),
            "email": {
                "smtp_server": os.getenv("EMAIL_SMTP_SERVER", "smtp.gmail.com"),
                "smtp_port": int(os.getenv("EMAIL_SMTP_PORT", 587)),
                "sender_email": os.getenv("EMAIL_SENDER", ""),
                "sender_password": os.getenv("EMAIL_PASSWORD", ""),
                "recipient_email": os.getenv("EMAIL_RECIPIENT", "")
            },
            "telegram": {
                "bot_token": os.getenv("TELEGRAM_BOT_TOKEN", ""),
                "chat_ids": self._parse_chat_ids(os.getenv("TELEGRAM_CHAT_IDS", "")),
                "chat_id": os.getenv("TELEGRAM_CHAT_ID", "")  # Backward compatibility
            },
            "discord": {
                "webhook_urls": self._parse_webhook_urls(os.getenv("DISCORD_WEBHOOK_URLS", "")),
                "webhook_url": os.getenv("DISCORD_WEBHOOK_URL", "")  # Backward compatibility
            }
        }
        
        try:
            with open(self.config_file, 'r') as f:
                file_config = json.load(f)
                
                # Merge file config with env config, prioritizing env variables
                config = default_config.copy()
                for key, value in file_config.items():
                    if key not in config:
                        config[key] = value
                    elif isinstance(value, dict) and isinstance(config[key], dict):
                        # Merge nested dictionaries
                        for sub_key, sub_value in value.items():
                            if sub_key not in config[key] or not config[key][sub_key]:
                                config[key][sub_key] = sub_value
                    elif not config[key]:  # Only use file value if env value is empty
                        config[key] = value
                
                return config
        except FileNotFoundError:
            logging.info(f"File c·∫•u h√¨nh {self.config_file} kh√¥ng t·ªìn t·∫°i. T·∫°o file m·ªõi.")
            with open(self.config_file, 'w') as f:
                json.dump(self._clean_config_for_file(default_config), f, indent=4)
            return default_config
    
    def _parse_chat_ids(self, chat_ids_str):
        """Parse chat IDs t·ª´ environment variable"""
        if not chat_ids_str:
            return []
        return [chat_id.strip() for chat_id in chat_ids_str.split(",") if chat_id.strip()]
    
    def _parse_webhook_urls(self, webhook_urls_str):
        """Parse webhook URLs t·ª´ environment variable"""
        if not webhook_urls_str:
            return []
        return [url.strip() for url in webhook_urls_str.split(",") if url.strip()]
    
    def _clean_config_for_file(self, config):
        """Remove sensitive info when saving to file"""
        clean_config = config.copy()
        clean_config["email"]["sender_password"] = ""
        clean_config["telegram"]["bot_token"] = ""
        return clean_config
    
    def get_public_ip(self):
        """L·∫•y IP public hi·ªán t·∫°i"""
        services = [
            'https://api.ipify.org?format=json',
            'https://httpbin.org/ip',
            'https://api.myip.com',
            'https://ipapi.co/json'
        ]
        
        for service in services:
            try:
                response = requests.get(service, timeout=10)
                response.raise_for_status()
                data = response.json()
                
                # X·ª≠ l√Ω response kh√°c nhau t·ª´ c√°c service
                if 'ip' in data:
                    return data['ip']
                elif 'origin' in data:
                    return data['origin']
                elif 'query' in data:
                    return data['query']
                    
            except Exception as e:
                logging.warning(f"Kh√¥ng th·ªÉ l·∫•y IP t·ª´ {service}: {e}")
                continue
        
        raise Exception("Kh√¥ng th·ªÉ l·∫•y IP public t·ª´ t·∫•t c·∫£ c√°c service")
    
    def load_previous_ip(self):
        """T·∫£i IP tr∆∞·ªõc ƒë√≥ t·ª´ file"""
        try:
            with open(self.ip_file, 'r') as f:
                return f.read().strip()
        except FileNotFoundError:
            return None
    
    def save_current_ip(self, ip):
        """L∆∞u IP hi·ªán t·∫°i v√†o file"""
        with open(self.ip_file, 'w') as f:
            f.write(ip)
    
    def send_email_notification(self, old_ip, new_ip):
        """G·ª≠i th√¥ng b√°o qua email"""
        try:
            email_config = self.config['email']
            
            msg = MIMEMultipart()
            msg['From'] = email_config['sender_email']
            msg['To'] = email_config['recipient_email']
            msg['Subject'] = f"Thay ƒë·ªïi IP Public - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            body = f"""
Xin ch√†o!

IP public c·ªßa b·∫°n ƒë√£ thay ƒë·ªïi:

‚Ä¢ IP c≈©: {old_ip or 'Kh√¥ng x√°c ƒë·ªãnh'}
‚Ä¢ IP m·ªõi: {new_ip}
‚Ä¢ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Bot IP Monitor
            """
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(email_config['smtp_server'], email_config['smtp_port'])
            server.starttls()
            server.login(email_config['sender_email'], email_config['sender_password'])
            server.send_message(msg)
            server.quit()
            
            logging.info("ƒê√£ g·ª≠i th√¥ng b√°o email th√†nh c√¥ng")
            
        except Exception as e:
            logging.error(f"L·ªói khi g·ª≠i email: {e}")
    
    def send_telegram_notification(self, old_ip, new_ip):
        """G·ª≠i th√¥ng b√°o qua Telegram ƒë·∫øn multiple chat IDs"""
        try:
            telegram_config = self.config['telegram']
            bot_token = telegram_config.get('bot_token')
            
            if not bot_token:
                logging.warning("Telegram bot token kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")
                return
            
            # L·∫•y danh s√°ch chat IDs (∆∞u ti√™n chat_ids, fallback v·ªÅ chat_id)
            chat_ids = telegram_config.get('chat_ids', [])
            if not chat_ids and telegram_config.get('chat_id'):
                chat_ids = [telegram_config.get('chat_id')]
            
            if not chat_ids:
                logging.warning("Kh√¥ng c√≥ chat ID n√†o ƒë∆∞·ª£c c·∫•u h√¨nh cho Telegram")
                return
            
            message = f"""
üîÑ *Thay ƒë·ªïi IP Public*

‚Ä¢ IP c≈©: `{old_ip or 'Kh√¥ng x√°c ƒë·ªãnh'}`
‚Ä¢ IP m·ªõi: `{new_ip}`
‚Ä¢ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            """
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            success_count = 0
            for chat_id in chat_ids:
                try:
                    data = {
                        'chat_id': chat_id,
                        'text': message,
                        'parse_mode': 'Markdown'
                    }
                    
                    response = requests.post(url, data=data, timeout=10)
                    response.raise_for_status()
                    success_count += 1
                    logging.info(f"ƒê√£ g·ª≠i th√¥ng b√°o Telegram th√†nh c√¥ng ƒë·∫øn chat ID: {chat_id}")
                    
                except Exception as e:
                    logging.error(f"L·ªói khi g·ª≠i Telegram ƒë·∫øn chat ID {chat_id}: {e}")
            
            if success_count > 0:
                logging.info(f"ƒê√£ g·ª≠i th√†nh c√¥ng {success_count}/{len(chat_ids)} th√¥ng b√°o Telegram")
            
        except Exception as e:
            logging.error(f"L·ªói khi g·ª≠i Telegram: {e}")
    
    def send_discord_notification(self, old_ip, new_ip):
        """G·ª≠i th√¥ng b√°o qua Discord ƒë·∫øn multiple webhooks"""
        try:
            discord_config = self.config['discord']
            
            # L·∫•y danh s√°ch webhook URLs (∆∞u ti√™n webhook_urls, fallback v·ªÅ webhook_url)
            webhook_urls = discord_config.get('webhook_urls', [])
            if not webhook_urls and discord_config.get('webhook_url'):
                webhook_urls = [discord_config.get('webhook_url')]
            
            if not webhook_urls:
                logging.warning("Kh√¥ng c√≥ webhook URL n√†o ƒë∆∞·ª£c c·∫•u h√¨nh cho Discord")
                return
            
            embed = {
                "title": "üîÑ Thay ƒë·ªïi IP Public",
                "color": 0x00ff00,
                "fields": [
                    {"name": "IP c≈©", "value": old_ip or "Kh√¥ng x√°c ƒë·ªãnh", "inline": True},
                    {"name": "IP m·ªõi", "value": new_ip, "inline": True},
                    {"name": "Th·ªùi gian", "value": datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "inline": False}
                ],
                "timestamp": datetime.now().isoformat()
            }
            
            data = {"embeds": [embed]}
            
            success_count = 0
            for webhook_url in webhook_urls:
                try:
                    response = requests.post(webhook_url, json=data, timeout=10)
                    response.raise_for_status()
                    success_count += 1
                    # Log webhook URL m·ªôt c√°ch an to√†n (ch·ªâ hi·ªÉn th·ªã ph·∫ßn cu·ªëi)
                    masked_url = f"...{webhook_url[-20:]}" if len(webhook_url) > 20 else webhook_url
                    logging.info(f"ƒê√£ g·ª≠i th√¥ng b√°o Discord th√†nh c√¥ng ƒë·∫øn webhook: {masked_url}")
                    
                except Exception as e:
                    masked_url = f"...{webhook_url[-20:]}" if len(webhook_url) > 20 else webhook_url
                    logging.error(f"L·ªói khi g·ª≠i Discord ƒë·∫øn webhook {masked_url}: {e}")
            
            if success_count > 0:
                logging.info(f"ƒê√£ g·ª≠i th√†nh c√¥ng {success_count}/{len(webhook_urls)} th√¥ng b√°o Discord")
            
        except Exception as e:
            logging.error(f"L·ªói khi g·ª≠i Discord: {e}")
    
    def send_notifications(self, old_ip, new_ip):
        """G·ª≠i th√¥ng b√°o qua t·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c c·∫•u h√¨nh"""
        methods = self.config.get('notification_methods', [])
        
        for method in methods:
            if method == 'email':
                self.send_email_notification(old_ip, new_ip)
            elif method == 'telegram':
                self.send_telegram_notification(old_ip, new_ip)
            elif method == 'discord':
                self.send_discord_notification(old_ip, new_ip)
    
    def run(self):
        """Ch·∫°y bot theo d√µi IP"""
        logging.info("B·∫Øt ƒë·∫ßu theo d√µi IP public...")
        
        # L·∫•y IP tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
        previous_ip = self.load_previous_ip()
        logging.info(f"IP tr∆∞·ªõc ƒë√≥: {previous_ip}")
        
        while True:
            try:
                # L·∫•y IP hi·ªán t·∫°i
                current_ip = self.get_public_ip()
                logging.info(f"IP hi·ªán t·∫°i: {current_ip}")
                
                # Ki·ªÉm tra thay ƒë·ªïi
                if previous_ip != current_ip:
                    logging.info(f"Ph√°t hi·ªán thay ƒë·ªïi IP: {previous_ip} -> {current_ip}")
                    
                    # G·ª≠i th√¥ng b√°o
                    self.send_notifications(previous_ip, current_ip)
                    
                    # C·∫≠p nh·∫≠t IP
                    self.save_current_ip(current_ip)
                    previous_ip = current_ip
                
                # Ch·ªù ƒë·∫øn l·∫ßn ki·ªÉm tra ti·∫øp theo
                time.sleep(self.config['check_interval'])
                
            except KeyboardInterrupt:
                logging.info("D·ª´ng bot theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
                break
            except Exception as e:
                logging.error(f"L·ªói trong qu√° tr√¨nh theo d√µi: {e}")
                time.sleep(60)  # Ch·ªù 1 ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i

def main():
    """H√†m main"""
    import argparse
    
    parser = argparse.ArgumentParser(description='IP Monitor Bot - Theo d√µi thay ƒë·ªïi IP public')
    parser.add_argument('--config', default='config.json', help='File c·∫•u h√¨nh (m·∫∑c ƒë·ªãnh: config.json)')
    parser.add_argument('--check-ip', action='store_true', help='Ch·ªâ ki·ªÉm tra IP hi·ªán t·∫°i v√† tho√°t')
    
    args = parser.parse_args()
    
    monitor = IPMonitor(args.config)
    
    if args.check_ip:
        try:
            ip = monitor.get_public_ip()
            print(f"IP public hi·ªán t·∫°i: {ip}")
        except Exception as e:
            print(f"L·ªói khi l·∫•y IP: {e}")
    else:
        monitor.run()

if __name__ == "__main__":
    main()